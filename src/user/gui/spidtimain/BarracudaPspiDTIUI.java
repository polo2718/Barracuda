/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user.gui.spidtimain;

import data.niftilibrary.niftijio.DrawableNiftiVolume;
import data.niftilibrary.niftijio.FourDimensionalArray;
import data.niftilibrary.niftijio.NiftiVolume;
import domain.imaging.processing.PspiImagingRunnable;
import domain.imaging.processing.pspiDTI;
import domain.imaging.spatialfiltering.Kernel;
import domain.imaging.spatialfiltering.NiftiNonLinearSpatialFilter;
import domain.imaging.spatialfiltering.operations.UnpairedtTest;
import java.awt.Cursor;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import user.gui.tools.IconGetter;

/**
 *
 * @author Diego Garibay-Pulido 2016
 */
public class BarracudaPspiDTIUI extends javax.swing.JFrame {
private JFileChooser fc;
private DrawableNiftiVolume ictalFA, baselineFA, ictalTR, baselineTR, binaryMask;
private String workingDirectory=null;
private String patientInitials;
private double alpha; //alpha is the confidence level
private double faThreshold=Double.NaN;
private double trThreshold=Double.NaN;

    /**
     * Creates new form BarracudaPspiDTIUI
     */
    public BarracudaPspiDTIUI() {
        initComponents();
        fc= new JFileChooser();
        // Initiate file chooser settings
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "NIFTI (*.nii,*.gz)", "nii", "gz");
        fc.setFileFilter(filter);
        fc.addChoosableFileFilter(filter);
        fc.setAcceptAllFileFilterUsed(false);
        this.setLocationRelativeTo(null);
        tabManager.setEnabledAt(1, false); //Files tab, only enabled when patientInitials are defined
        tabManager.setEnabledAt(2, false); // Analysis Tab, only enabled when at least all the files are input
        alpha = 0.05;
        errorDialog.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        errorDialog = new javax.swing.JDialog();
        errorTitleLabel = new javax.swing.JLabel();
        errorLabel = new javax.swing.JLabel();
        tabManager = new javax.swing.JTabbedPane();
        settingsPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        patientInfoText = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        alphaText = new javax.swing.JTextField();
        faThresh = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        trThresh = new javax.swing.JComboBox<>();
        giscOption = new javax.swing.JCheckBox();
        correctedOption = new javax.swing.JCheckBox();
        fileTab = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        openIctalFileButton = new javax.swing.JButton();
        openBaselineFileButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        maskTextPane = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ictalTextPane = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        baselineTextPane = new javax.swing.JTextPane();
        openMaskFileButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        directoryTextPane = new javax.swing.JTextPane();
        openWorkingDirectoryButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ictalTraceTextPane = new javax.swing.JTextPane();
        openIctalTRButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        baselineTraceTextPane = new javax.swing.JTextPane();
        openBaselineTRButton = new javax.swing.JButton();
        analysisTab = new javax.swing.JPanel();
        calculateButton = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        consolePane = new javax.swing.JTextPane();
        clearConsoleButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        optionsMenu = new javax.swing.JMenu();
        newAnalysisButton = new javax.swing.JMenuItem();

        errorDialog.setTitle("Error!!!");
        errorDialog.setIconImage(IconGetter.getProjectIcon("error_icon.png"));
        errorDialog.setModal(true);
        errorDialog.setSize(new java.awt.Dimension(280, 120));

        errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");

        errorLabel.setText("Error Message");

        javax.swing.GroupLayout errorDialogLayout = new javax.swing.GroupLayout(errorDialog.getContentPane());
        errorDialog.getContentPane().setLayout(errorDialogLayout);
        errorDialogLayout.setHorizontalGroup(
            errorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorDialogLayout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(errorTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(119, Short.MAX_VALUE))
            .addGroup(errorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        errorDialogLayout.setVerticalGroup(
            errorDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(errorDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(errorTitleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(IconGetter.getProjectIcon("brain128.png"));

        tabManager.setVerifyInputWhenFocusTarget(false);

        jLabel7.setText("Patient Initials: ");
        jLabel7.setToolTipText("");

        patientInfoText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        patientInfoText.setToolTipText("");
        patientInfoText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                patientInfoTextFocusLost(evt);
            }
        });
        patientInfoText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientInfoTextActionPerformed(evt);
            }
        });

        jLabel8.setText("FA Threshold:");
        jLabel8.setToolTipText("");

        alphaText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        alphaText.setText("0.05");
        alphaText.setToolTipText("");
        alphaText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                alphaTextFocusLost(evt);
            }
        });
        alphaText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphaTextActionPerformed(evt);
            }
        });

        faThresh.setEditable(true);
        faThresh.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        faThresh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "0.05", "0.10", "0.15", "0.20" }));
        faThresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                faThreshActionPerformed(evt);
            }
        });

        jLabel9.setText("Confidence level (alpha):");
        jLabel9.setToolTipText("");

        jLabel10.setText("Trace Threshold:");
        jLabel10.setToolTipText("");

        trThresh.setEditable(true);
        trThresh.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        trThresh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Default", "0.05", "0.10", "0.15", "0.20" }));
        trThresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trThreshActionPerformed(evt);
            }
        });

        giscOption.setText("Global Intensity Shift Correction");
        giscOption.setToolTipText("");

        correctedOption.setText("Bonferroni Correction");

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER, false)
                            .addComponent(trThresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(alphaText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientInfoText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(faThresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(settingsPanelLayout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(correctedOption)
                        .addGap(14, 14, 14)
                        .addComponent(giscOption)))
                .addContainerGap(444, Short.MAX_VALUE))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel7)
                    .addComponent(patientInfoText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel9)
                    .addComponent(alphaText, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(faThresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trThresh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(31, 31, 31)
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(giscOption)
                    .addComponent(correctedOption))
                .addContainerGap(88, Short.MAX_VALUE))
        );

        tabManager.addTab("Settings", settingsPanel);

        jLabel2.setText("Baseline FA File:");

        openIctalFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open_icon.png"))); // NOI18N
        openIctalFileButton.setToolTipText("");
        openIctalFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openIctalFileButtonActionPerformed(evt);
            }
        });

        openBaselineFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open_icon.png"))); // NOI18N
        openBaselineFileButton.setToolTipText("");
        openBaselineFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBaselineFileButtonActionPerformed(evt);
            }
        });

        maskTextPane.setEditable(false);
        jScrollPane3.setViewportView(maskTextPane);

        jLabel3.setText("WM mask File:");
        jLabel3.setToolTipText("");

        jLabel1.setText("Post-ictal FA File:");

        ictalTextPane.setEditable(false);
        jScrollPane1.setViewportView(ictalTextPane);

        baselineTextPane.setEditable(false);
        jScrollPane2.setViewportView(baselineTextPane);

        openMaskFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open_icon.png"))); // NOI18N
        openMaskFileButton.setToolTipText("");
        openMaskFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMaskFileButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Working Directory:");
        jLabel4.setToolTipText("");

        directoryTextPane.setEditable(false);
        jScrollPane4.setViewportView(directoryTextPane);

        openWorkingDirectoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open_icon.png"))); // NOI18N
        openWorkingDirectoryButton.setToolTipText("");
        openWorkingDirectoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openWorkingDirectoryButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Post-ictal TR File:");

        ictalTraceTextPane.setEditable(false);
        jScrollPane5.setViewportView(ictalTraceTextPane);

        openIctalTRButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open_icon.png"))); // NOI18N
        openIctalTRButton.setToolTipText("");
        openIctalTRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openIctalTRButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Baseline TR File:");
        jLabel6.setToolTipText("");

        baselineTraceTextPane.setEditable(false);
        jScrollPane6.setViewportView(baselineTraceTextPane);

        openBaselineTRButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/open_icon.png"))); // NOI18N
        openBaselineTRButton.setToolTipText("");
        openBaselineTRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBaselineTRButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileTabLayout = new javax.swing.GroupLayout(fileTab);
        fileTab.setLayout(fileTabLayout);
        fileTabLayout.setHorizontalGroup(
            fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileTabLayout.createSequentialGroup()
                .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(openIctalFileButton)
                            .addComponent(openBaselineFileButton)
                            .addComponent(openMaskFileButton))
                        .addGap(46, 46, 46)
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(openIctalTRButton)
                            .addComponent(openBaselineTRButton)))
                    .addGroup(fileTabLayout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openWorkingDirectoryButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fileTabLayout.setVerticalGroup(
            fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fileTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openWorkingDirectoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(fileTabLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(openIctalFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(openBaselineFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(21, 21, 21)
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(openMaskFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(fileTabLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(openIctalTRButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(fileTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(openBaselineTRButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(258, 258, 258))
        );

        tabManager.addTab("File input", fileTab);

        calculateButton.setText(" Calculate pspiDTI");
        calculateButton.setToolTipText("");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        jScrollPane7.setBorder(new javax.swing.border.LineBorder(java.awt.SystemColor.activeCaption, 1, true));

        consolePane.setEditable(false);
        consolePane.setBorder(null);
        consolePane.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jScrollPane7.setViewportView(consolePane);

        clearConsoleButton.setText("Clear");
        clearConsoleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearConsoleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout analysisTabLayout = new javax.swing.GroupLayout(analysisTab);
        analysisTab.setLayout(analysisTabLayout);
        analysisTabLayout.setHorizontalGroup(
            analysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(analysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7)
                    .addGroup(analysisTabLayout.createSequentialGroup()
                        .addComponent(calculateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 640, Short.MAX_VALUE)
                        .addComponent(clearConsoleButton)))
                .addContainerGap())
        );
        analysisTabLayout.setVerticalGroup(
            analysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(analysisTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(analysisTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(analysisTabLayout.createSequentialGroup()
                        .addComponent(calculateButton)
                        .addGap(15, 15, 15))
                    .addComponent(clearConsoleButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabManager.addTab("Analysis", analysisTab);

        optionsMenu.setText("Options");

        newAnalysisButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newAnalysisButton.setText("New Analysis");
        newAnalysisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAnalysisButtonActionPerformed(evt);
            }
        });
        optionsMenu.add(newAnalysisButton);

        jMenuBar1.add(optionsMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabManager, javax.swing.GroupLayout.PREFERRED_SIZE, 868, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabManager, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openIctalFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openIctalFileButtonActionPerformed
        int returnVal= fc.showDialog(this,"Open ictal FA file...");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filename = file.getAbsolutePath();
            try{
                ictalFA= new DrawableNiftiVolume(NiftiVolume.read(filename));
                ictalTextPane.setText(filename);
            }catch(Exception e){

            }
        }
        else {
            returnVal=0;
        }
        if(workingDirectory!=null){
            if((ictalFA!=null & baselineFA!=null)|(ictalTR!=null & baselineTR!=null)){
                tabManager.setEnabledAt(2, true);
            }
        }
        //Check dimensions & orientation with baseline
        if(baselineFA!=null ){
            for(int i=1;i<5;i++){
                if(ictalFA.header.dim[i]!=baselineFA.header.dim[i]){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Baseline & ictal FA dimensions don't agree");
                    ictalFA=null;
                    tabManager.setEnabledAt(2,false);
                    ictalTextPane.setText("");
                    errorDialog.setVisible(true);
                    break;
                }
            }
            if(ictalFA!=null){
                if(!ictalFA.header.orientation().equals(baselineFA.header.orientation())){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Baseline & ictal FA orientations don't agree");
                    ictalFA=null;
                    tabManager.setEnabledAt(2,false);
                    ictalTextPane.setText("");
                    errorDialog.setVisible(true);
                }
            }
        }
        //Check dimensions & orientation with mask
        if(binaryMask!=null ){
            for(int i=1;i<5;i++){
                if(ictalFA.header.dim[i]!=binaryMask.header.dim[i]){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & ictal FA dimensions don't agree");
                    ictalFA=null;
                    tabManager.setEnabledAt(2,false);
                    ictalTextPane.setText("");
                    errorDialog.setVisible(true);
                    break;
                }
            }
            if(ictalFA!=null){
                if(!ictalFA.header.orientation().equals(binaryMask.header.orientation())){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & ictal FA orientations don't agree");
                    ictalFA=null;
                    tabManager.setEnabledAt(2,false);
                    ictalTextPane.setText("");
                    errorDialog.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_openIctalFileButtonActionPerformed

    private void openBaselineFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBaselineFileButtonActionPerformed
        int returnVal= fc.showDialog(this,"Open Baseline FA file...");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filename = file.getAbsolutePath();
            try{
                baselineFA= new DrawableNiftiVolume(NiftiVolume.read(filename));
                baselineTextPane.setText(filename);
            }catch(Exception e){
                
            }
        }
        else {
            returnVal=0;
        }
        if(workingDirectory!=null){
            if((ictalFA!=null & baselineFA!=null)|(ictalTR!=null & baselineTR!=null)){
                tabManager.setEnabledAt(2, true);
            }
        }
        //Check dimensions & orientation with ictal
        if(ictalFA!=null ){
            for(int i=1;i<5;i++){
                if(ictalFA.header.dim[i]!=baselineFA.header.dim[i]){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Baseline & ictal FA dimensions don't agree");
                    baselineFA=null;
                    tabManager.setEnabledAt(2,false);
                    baselineTextPane.setText("");
                    errorDialog.setVisible(true);
                    break;
                }
            }
            if(baselineFA!=null){
                if(!ictalFA.header.orientation().equals(baselineFA.header.orientation())){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Baseline & ictal FA orientations don't agree");
                    baselineFA=null;
                    tabManager.setEnabledAt(2,false);
                    baselineTextPane.setText("");
                    errorDialog.setVisible(true);
                }
            }
        }
        //Check dimensions & orientation with mask
        if(binaryMask!=null ){
            for(int i=1;i<5;i++){
                if(baselineFA.header.dim[i]!=binaryMask.header.dim[i]){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & baseline FA dimensions don't agree");
                    baselineFA=null;
                    tabManager.setEnabledAt(2,false);
                    baselineTextPane.setText("");
                    errorDialog.setVisible(true);
                    break;
                }
            }
            if(baselineFA!=null){
                if(!baselineFA.header.orientation().equals(binaryMask.header.orientation())){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & baseline FA orientations don't agree");
                    baselineFA=null;
                    tabManager.setEnabledAt(2,false);
                    baselineTextPane.setText("");
                    errorDialog.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_openBaselineFileButtonActionPerformed

    private void openMaskFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMaskFileButtonActionPerformed
        int returnVal= fc.showDialog(this,"Open WM mask file...");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filename = file.getAbsolutePath();
            try{
                binaryMask= new DrawableNiftiVolume(NiftiVolume.read(filename));
                maskTextPane.setText(filename);
            }catch(Exception e){

            }
        }
        else {
            returnVal=0;
        }
        if(workingDirectory!=null){
            if((ictalFA!=null & baselineFA!=null)|(ictalTR!=null & baselineTR!=null)){
                tabManager.setEnabledAt(2, true);
            }
        }
        //Check baseline TR
        if(baselineTR!=null ){
            for(int i=1;i<5;i++){
                if(baselineTR.header.dim[i]!=binaryMask.header.dim[i]){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & baseline TR dimensions don't agree");
                    binaryMask=null;
                    tabManager.setEnabledAt(2,false);
                    maskTextPane.setText("");
                    errorDialog.setVisible(true);
                    break;
                }
            }
            if(binaryMask!=null){
                if(!baselineTR.header.orientation().equals(binaryMask.header.orientation())){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & baseline TR orientations don't agree");
                    binaryMask=null;
                    tabManager.setEnabledAt(2,false);
                    maskTextPane.setText("");
                    errorDialog.setVisible(true);
                }
            }
        }
        //Check baseline FA
        if(baselineFA!=null ){
            for(int i=1;i<5;i++){
                if(baselineFA.header.dim[i]!=binaryMask.header.dim[i]){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & baseline FA dimensions don't agree");
                    binaryMask=null;
                    tabManager.setEnabledAt(2,false);
                    maskTextPane.setText("");
                    errorDialog.setVisible(true);
                    break;
                }
            }
            if(binaryMask!=null){
                if(!baselineFA.header.orientation().equals(binaryMask.header.orientation())){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & baseline FA orientations don't agree");
                    binaryMask=null;
                    tabManager.setEnabledAt(2,false);
                    maskTextPane.setText("");
                    errorDialog.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_openMaskFileButtonActionPerformed

    private void openWorkingDirectoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openWorkingDirectoryButtonActionPerformed
        configureFileChooser(false);
        
        int returnVal= fc.showDialog(this,"Select Working Directory...");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            workingDirectory = file.getAbsolutePath()+"\\";
            directoryTextPane.setText(workingDirectory);
            fc.setCurrentDirectory(file);
            /*String outputFolder= workingDirectory+patientInitials+"_pspiDTI_output";
            File output=new File(outputFolder);
            if(!output.exists()){
                if(output.mkdir()){
                    
                }else{
                    errorLabel.setText("Warning: Output Directory could not be created");
                    errorDialog.setVisible(true);
                }
            }else{
                errorLabel.setText("Warning: Output Directory already exists");
                errorDialog.setLocationRelativeTo(null);
                errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Warning!!!!</font></strong>");
                errorDialog.setVisible(true);
            }*/
        }
        else {
            returnVal=0;
        }
        
        configureFileChooser(true);
        if(workingDirectory!=null){
            if((ictalFA!=null & baselineFA!=null)|(ictalTR!=null & baselineTR!=null)){
                tabManager.setEnabledAt(2, true);
            }
        }
    }//GEN-LAST:event_openWorkingDirectoryButtonActionPerformed

    private void openIctalTRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openIctalTRButtonActionPerformed
        int returnVal= fc.showDialog(this,"Open ictal Trace file...");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filename = file.getAbsolutePath();
            try{
                ictalTR= new DrawableNiftiVolume(NiftiVolume.read(filename));
                ictalTraceTextPane.setText(filename);
            }catch(Exception e){

            }
        }
        else {
            returnVal=0;
        }
        if(workingDirectory!=null){
            if((ictalFA!=null & baselineFA!=null)|(ictalTR!=null & baselineTR!=null)){
                tabManager.setEnabledAt(2, true);
            }
        }
        //Check dimensions & orientation with baseline
        if(baselineTR!=null ){
            for(int i=1;i<5;i++){
                if(ictalTR.header.dim[i]!=baselineTR.header.dim[i]){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Baseline & ictal TR dimensions don't agree");
                    ictalTR=null;
                    tabManager.setEnabledAt(2,false);
                    ictalTraceTextPane.setText("");
                    errorDialog.setVisible(true);
                    break;
                }
            }
            if(ictalTR!=null){
                if(!ictalTR.header.orientation().equals(baselineTR.header.orientation())){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Baseline & ictal TR orientations don't agree");
                    ictalTR=null;
                    tabManager.setEnabledAt(2,false);
                    ictalTraceTextPane.setText("");
                    errorDialog.setVisible(true);
                }
            }
        }
        //Check dimensions & orientation with mask
        if(binaryMask!=null ){
            for(int i=1;i<5;i++){
                if(ictalTR.header.dim[i]!=binaryMask.header.dim[i]){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & ictal TR dimensions don't agree");
                    ictalTR=null;
                    tabManager.setEnabledAt(2,false);
                    ictalTraceTextPane.setText("");
                    errorDialog.setVisible(true);
                    break;
                }
            }
            if(ictalTR!=null){
                if(!ictalTR.header.orientation().equals(binaryMask.header.orientation())){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & ictal TR orientations don't agree");
                    ictalTR=null;
                    tabManager.setEnabledAt(2,false);
                    ictalTraceTextPane.setText("");
                    errorDialog.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_openIctalTRButtonActionPerformed

    private void openBaselineTRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBaselineTRButtonActionPerformed
        int returnVal= fc.showDialog(this,"Open baseline Trace file...");
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String filename = file.getAbsolutePath();
            try{
                baselineTR= new DrawableNiftiVolume(NiftiVolume.read(filename));
                baselineTraceTextPane.setText(filename);
            }catch(Exception e){

            }
        }
        else {
            returnVal=0;
        }
        if(workingDirectory!=null){
            if((ictalFA!=null & baselineFA!=null)|(ictalTR!=null & baselineTR!=null)){
                tabManager.setEnabledAt(2, true);
            }
        }
        //Check dimensions & orientation with ictal
        if(ictalTR!=null ){
            for(int i=1;i<5;i++){
                if(ictalTR.header.dim[i]!=baselineTR.header.dim[i]){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Baseline & ictal TR dimensions don't agree");
                    errorDialog.setVisible(true);
                    baselineTR=null;
                    tabManager.setEnabledAt(2,false);
                    baselineTraceTextPane.setText("");
                    break;
                }
            }
            if(baselineTR!=null){
                if(!ictalTR.header.orientation().equals(baselineTR.header.orientation())){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Baseline & ictal TR orientations don't agree");
                    baselineTR=null;
                    tabManager.setEnabledAt(2,false);
                    baselineTraceTextPane.setText("");
                    errorDialog.setVisible(true);
                }
            }
        }
        //Check dimensions & orientation with mask
        if(binaryMask!=null ){
            for(int i=1;i<5;i++){
                if(baselineTR.header.dim[i]!=binaryMask.header.dim[i]){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & baseline TR dimensions don't agree");
                    baselineTR=null;
                    tabManager.setEnabledAt(2,false);
                    baselineTraceTextPane.setText("");
                    errorDialog.setVisible(true);
                    break;
                }
            }
            if(baselineTR!=null){
                if(!baselineTR.header.orientation().equals(binaryMask.header.orientation())){
                    errorTitleLabel.setText("<html> <strong><font size=4 color=\"red\">Error!!!!</font></strong>");
                    errorLabel.setText("Mask & baseline TR orientations don't agree");
                    baselineTR=null;
                    tabManager.setEnabledAt(2,false);
                    baselineTraceTextPane.setText("");
                    errorDialog.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_openBaselineTRButtonActionPerformed

    private void patientInfoTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientInfoTextActionPerformed
        if(patientInitials==null){
            patientInitials=new String();
            tabManager.setEnabledAt(1, true);
        }
        patientInitials= patientInfoText.getText().toUpperCase();
        patientInfoText.setText(patientInitials);
    }//GEN-LAST:event_patientInfoTextActionPerformed

    private void alphaTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphaTextActionPerformed
        if(patientInitials==null){
            patientInitials=new String();
        }
        patientInitials= patientInfoText.getText().toUpperCase();
        if(!patientInitials.equals("")){
            patientInfoText.setText(patientInitials);
            tabManager.setEnabledAt(1, true);
        }
    }//GEN-LAST:event_alphaTextActionPerformed

    private void alphaTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_alphaTextFocusLost
        String text=alphaText.getText();
        alpha=Double.parseDouble(text);
        if(alpha>1 | alpha<0){
            alpha=0.05;
            alphaText.setText(Double.toString(alpha));
        }
    }//GEN-LAST:event_alphaTextFocusLost

    private void patientInfoTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_patientInfoTextFocusLost
        if(patientInitials==null){
            patientInitials=new String();
        }
        patientInitials= patientInfoText.getText().toUpperCase();
        if(!patientInitials.equals("")){
            patientInfoText.setText(patientInitials);
            tabManager.setEnabledAt(1, true);
        }
    }//GEN-LAST:event_patientInfoTextFocusLost

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        double[] thresholds={faThreshold,trThreshold};
        
            (new Thread(new PspiImagingRunnable(ictalFA,baselineFA,ictalTR,baselineTR,
                   binaryMask,workingDirectory,patientInitials,alpha,consolePane,this,thresholds,correctedOption.isSelected(),giscOption.isSelected()))).start();
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void faThreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_faThreshActionPerformed
        String selection=(String)faThresh.getSelectedItem();
        double numericSelection;
        try{
            numericSelection=Double.parseDouble(selection);
        }catch(Exception e){
            numericSelection=2;
        }
        if(numericSelection<0 | numericSelection>1){
            faThresh.setSelectedIndex(0);
            faThreshold=Double.NaN;
        }else{
            faThreshold=numericSelection;
        }
    }//GEN-LAST:event_faThreshActionPerformed

    private void trThreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trThreshActionPerformed
        String selection=(String)faThresh.getSelectedItem();
        double numericSelection;
        try{
            numericSelection=Double.parseDouble(selection);
        }catch(Exception e){
            numericSelection=2;
        }
        if(numericSelection<0 | numericSelection>1){
            trThresh.setSelectedIndex(0);
            trThreshold=Double.NaN;
        }else{
            trThreshold=numericSelection;
        }
    }//GEN-LAST:event_trThreshActionPerformed

    private void newAnalysisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAnalysisButtonActionPerformed
        ictalFA=null;
        ictalTextPane.setText("");
        baselineFA=null;
        baselineTextPane.setText("");
        ictalTR=null;
        ictalTraceTextPane.setText("");
        baselineTR=null;
        baselineTraceTextPane.setText("");
        binaryMask=null;
        maskTextPane.setText("");
        workingDirectory=null;
        directoryTextPane.setText("");
        patientInitials=null;
        patientInfoText.setText("");
        tabManager.setSelectedIndex(0);
        tabManager.setEnabledAt(1,false);
        tabManager.setEnabledAt(2,false);
        consolePane.setText("");
        faThreshold=Double.NaN;
        faThresh.setSelectedIndex(0);
        trThreshold=Double.NaN;
        trThresh.setSelectedIndex(0);

    }//GEN-LAST:event_newAnalysisButtonActionPerformed

    private void clearConsoleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearConsoleButtonActionPerformed
        consolePane.setText("");
    }//GEN-LAST:event_clearConsoleButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField alphaText;
    private javax.swing.JPanel analysisTab;
    private javax.swing.JTextPane baselineTextPane;
    private javax.swing.JTextPane baselineTraceTextPane;
    private javax.swing.JButton calculateButton;
    private javax.swing.JButton clearConsoleButton;
    private javax.swing.JTextPane consolePane;
    private javax.swing.JCheckBox correctedOption;
    private javax.swing.JTextPane directoryTextPane;
    private javax.swing.JDialog errorDialog;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel errorTitleLabel;
    private javax.swing.JComboBox<String> faThresh;
    private javax.swing.JPanel fileTab;
    private javax.swing.JCheckBox giscOption;
    private javax.swing.JTextPane ictalTextPane;
    private javax.swing.JTextPane ictalTraceTextPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextPane maskTextPane;
    private javax.swing.JMenuItem newAnalysisButton;
    private javax.swing.JButton openBaselineFileButton;
    private javax.swing.JButton openBaselineTRButton;
    private javax.swing.JButton openIctalFileButton;
    private javax.swing.JButton openIctalTRButton;
    private javax.swing.JButton openMaskFileButton;
    private javax.swing.JButton openWorkingDirectoryButton;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JTextField patientInfoText;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JTabbedPane tabManager;
    private javax.swing.JComboBox<String> trThresh;
    // End of variables declaration//GEN-END:variables
    
    
    private void configureFileChooser(boolean flag){
        if(flag){// Flag =true configures for nifti files
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        }else{// Flag = false configures for directory choosing
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        }
    }
}
