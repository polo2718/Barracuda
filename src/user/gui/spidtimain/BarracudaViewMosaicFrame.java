/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user.gui.spidtimain;

import data.niftilibrary.niftijio.DrawableNiftiVolume;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import user.gui.tools.*;

/**
 *
 * @author
 * <p>
 * Diego Garibay-Pulido 2016</p>
 */
public class BarracudaViewMosaicFrame extends javax.swing.JFrame {
    DrawableNiftiVolume niiVol;
    DrawableNiftiVolume overlayVol;
    boolean view;
    int n;
    int m;
    String plane="coronal";
    boolean resize=false;
    Timer timer;
    String colorScale;
    String colorScaleOverlay;
    int startSlice;
    int endSlice;
    JFileChooser fc=new JFileChooser();
    boolean flag=true;
    
    
    /**
     * Creates new form MosaicViewFrame
     * @param niiVol 
     * @param overlayVol
     * @param view
     * @param colorScale
     * @param colorScaleOverlay
     */
    public BarracudaViewMosaicFrame(DrawableNiftiVolume niiVol ,DrawableNiftiVolume overlayVol,boolean view,String colorScale,String colorScaleOverlay) {
        initComponents();
        niiVol.clearDrawRange();
        if(overlayVol!=null){overlayVol.clearDrawRange();}
        this.niiVol=niiVol;
        this.overlayVol=overlayVol;
        this.view=view;
        this.n=5;
        this.m=5;
        this.colorScale=colorScale;
        this.colorScaleOverlay=colorScaleOverlay;
        initMosaic(n,m);
        initSettings();
        drawCoronalMosaic();
        /*
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
        "PNG Image (*.png)", "png");
        fc.setFileFilter(filter);
        fc.addChoosableFileFilter(filter);
        fc.setAcceptAllFileFilterUsed(false);*/
        flag=false;
         //Timer for resizing event
        int delay = 10;
        timer = new Timer( delay, new ActionListener(){
        @Override
        public void actionPerformed( ActionEvent e ){
            if(resize){  
                drawMosaics();
                resize=false;
            }
        }   
        });
        timer.setRepeats( false );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        settingsDialog = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        startSliceSlider = new javax.swing.JSlider();
        endSliceSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mosaicNSpinner = new javax.swing.JSpinner();
        mosaicMSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        startSliceText = new javax.swing.JLabel();
        endSliceText = new javax.swing.JLabel();
        mosaicToolbar = new javax.swing.JToolBar();
        coronalMosaicViewButton = new javax.swing.JButton();
        saggitalMosaicViewButton = new javax.swing.JButton();
        axialMosaicViewButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        saveImageButton = new javax.swing.JButton();
        viewSlider = new javax.swing.JSlider();
        displayPanel = new javax.swing.JPanel();

        settingsDialog.setTitle("Settings");
        settingsDialog.setPreferredSize(new java.awt.Dimension(400, 320));
        settingsDialog.setResizable(false);
        settingsDialog.setSize(new java.awt.Dimension(400, 320));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings"));
        jPanel1.setToolTipText("");

        startSliceSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startSliceSliderStateChanged(evt);
            }
        });

        endSliceSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                endSliceSliderStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel1.setText("Start Slice:");
        jLabel1.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("End Slice:");
        jLabel2.setToolTipText("");

        mosaicNSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mosaicNSpinnerStateChanged(evt);
            }
        });

        mosaicMSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mosaicMSpinnerStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Width:");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel4.setText("Height:");
        jLabel4.setToolTipText("");

        jLabel5.setText("Grid Size");
        jLabel5.setToolTipText("");

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        startSliceText.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        startSliceText.setText("0");

        endSliceText.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        endSliceText.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(endSliceText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startSliceText, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(cancelButton)
                .addGap(82, 82, 82))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(mosaicNSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mosaicMSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(startSliceSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(endSliceSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(startSliceText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startSliceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(endSliceText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endSliceSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jLabel5)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mosaicNSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mosaicMSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout settingsDialogLayout = new javax.swing.GroupLayout(settingsDialog.getContentPane());
        settingsDialog.getContentPane().setLayout(settingsDialogLayout);
        settingsDialogLayout.setHorizontalGroup(
            settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        settingsDialogLayout.setVerticalGroup(
            settingsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(IconGetter.getProjectIcon("synapticom2.png"));
        setMinimumSize(new java.awt.Dimension(300, 300));
        setSize(new java.awt.Dimension(800, 600));
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        mosaicToolbar.setFloatable(false);
        mosaicToolbar.setRollover(true);

        coronalMosaicViewButton.setText("C");
        coronalMosaicViewButton.setToolTipText("Coronal View");
        coronalMosaicViewButton.setFocusable(false);
        coronalMosaicViewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        coronalMosaicViewButton.setMaximumSize(new java.awt.Dimension(26, 26));
        coronalMosaicViewButton.setMinimumSize(new java.awt.Dimension(26, 26));
        coronalMosaicViewButton.setPreferredSize(new java.awt.Dimension(26, 26));
        coronalMosaicViewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        coronalMosaicViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coronalMosaicViewButtonActionPerformed(evt);
            }
        });
        mosaicToolbar.add(coronalMosaicViewButton);

        saggitalMosaicViewButton.setText("S");
        saggitalMosaicViewButton.setToolTipText("Saggital View");
        saggitalMosaicViewButton.setFocusable(false);
        saggitalMosaicViewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saggitalMosaicViewButton.setMaximumSize(new java.awt.Dimension(26, 26));
        saggitalMosaicViewButton.setMinimumSize(new java.awt.Dimension(26, 26));
        saggitalMosaicViewButton.setPreferredSize(new java.awt.Dimension(26, 26));
        saggitalMosaicViewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saggitalMosaicViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saggitalMosaicViewButtonActionPerformed(evt);
            }
        });
        mosaicToolbar.add(saggitalMosaicViewButton);

        axialMosaicViewButton.setText("A");
        axialMosaicViewButton.setToolTipText("Axial View");
        axialMosaicViewButton.setFocusable(false);
        axialMosaicViewButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        axialMosaicViewButton.setMaximumSize(new java.awt.Dimension(26, 26));
        axialMosaicViewButton.setMinimumSize(new java.awt.Dimension(26, 26));
        axialMosaicViewButton.setName(""); // NOI18N
        axialMosaicViewButton.setPreferredSize(new java.awt.Dimension(26, 26));
        axialMosaicViewButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        axialMosaicViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                axialMosaicViewButtonActionPerformed(evt);
            }
        });
        mosaicToolbar.add(axialMosaicViewButton);

        settingsButton.setIcon(IconGetter.getProjectImageIcon("settings_icon.png")
        );
        settingsButton.setToolTipText("Settings");
        settingsButton.setFocusable(false);
        settingsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        settingsButton.setMaximumSize(new java.awt.Dimension(26, 26));
        settingsButton.setMinimumSize(new java.awt.Dimension(26, 26));
        settingsButton.setPreferredSize(new java.awt.Dimension(26, 26));
        settingsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        mosaicToolbar.add(settingsButton);

        saveImageButton.setIcon(IconGetter.getProjectImageIcon("save_image_icon.png")
        );
        saveImageButton.setToolTipText("Save Image");
        saveImageButton.setFocusable(false);
        saveImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveImageButton.setMaximumSize(new java.awt.Dimension(26, 26));
        saveImageButton.setMinimumSize(new java.awt.Dimension(26, 26));
        saveImageButton.setPreferredSize(new java.awt.Dimension(26, 26));
        saveImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveImageButtonActionPerformed(evt);
            }
        });
        mosaicToolbar.add(saveImageButton);

        viewSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                viewSliderStateChanged(evt);
            }
        });
        mosaicToolbar.add(viewSlider);

        displayPanel.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mosaicToolbar, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mosaicToolbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(displayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void coronalMosaicViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coronalMosaicViewButtonActionPerformed
        displayPanel.removeAll();
        //If last one was a different plane
        if(!plane.equals("coronal")){
            plane="coronal";
            initSettings();
        }      
        drawCoronalMosaic();
    }//GEN-LAST:event_coronalMosaicViewButtonActionPerformed

    private void saggitalMosaicViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saggitalMosaicViewButtonActionPerformed
        displayPanel.removeAll();
        if(!plane.equals("saggital")){
            plane="saggital";
            initSettings();
        }
        drawSaggitalMosaic();
    }//GEN-LAST:event_saggitalMosaicViewButtonActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        //initSettings();
        startSliceSlider.setValue(startSlice);
        settingsDialog.setVisible(true);
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void axialMosaicViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_axialMosaicViewButtonActionPerformed
        if(!plane.equals("axial")){
            plane="axial";
            initSettings();
        }
        displayPanel.removeAll();
        drawAxialMosaic();
    }//GEN-LAST:event_axialMosaicViewButtonActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        displayPanel.removeAll();
        resize=true;
        timer.start(); 
    }//GEN-LAST:event_formComponentResized

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        startSlice=startSliceSlider.getValue();
        endSlice=endSliceSlider.getValue();
        n=(int)mosaicNSpinner.getValue();
        m=(int)mosaicMSpinner.getValue();
        settingsDialog.setVisible(false);
        displayPanel.removeAll();
        resize=true;
        initMosaic(n,m);
        timer.start();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        settingsDialog.setVisible(false);
        startSliceSlider.setMaximum(endSlice-(n*m));
        endSliceSlider.setMinimum(startSlice+(n*m));
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void startSliceSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startSliceSliderStateChanged
        startSliceText.setText(Integer.toString(startSliceSlider.getValue()));
        endSliceSlider.setMinimum(startSliceSlider.getValue()+(n*m));
    }//GEN-LAST:event_startSliceSliderStateChanged

    private void endSliceSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_endSliceSliderStateChanged
        endSliceText.setText(Integer.toString(endSliceSlider.getValue()));
        startSliceSlider.setMaximum(endSliceSlider.getValue()-(n*m));
    }//GEN-LAST:event_endSliceSliderStateChanged

    private void mosaicNSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mosaicNSpinnerStateChanged
        mosaicMSpinner.setValue(mosaicNSpinner.getValue());
    }//GEN-LAST:event_mosaicNSpinnerStateChanged

    private void mosaicMSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mosaicMSpinnerStateChanged
        mosaicNSpinner.setValue(mosaicMSpinner.getValue());
    }//GEN-LAST:event_mosaicMSpinnerStateChanged

    private void saveImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveImageButtonActionPerformed
        savePanel();
    }//GEN-LAST:event_saveImageButtonActionPerformed

    private void viewSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_viewSliderStateChanged
        if(!flag){
            startSlice=viewSlider.getValue();
            displayPanel.removeAll();
            drawMosaics();
        }
    }//GEN-LAST:event_viewSliderStateChanged

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
       int notches = evt.getWheelRotation();
       if(notches<0){
           try{
               viewSlider.setValue(viewSlider.getValue()+1);
           }catch(Exception e){
               
           }
       }else{
          try{
               viewSlider.setValue(viewSlider.getValue()-1);
           }catch(Exception e){
               
           } 
       }
    }//GEN-LAST:event_formMouseWheelMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton axialMosaicViewButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton coronalMosaicViewButton;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JSlider endSliceSlider;
    private javax.swing.JLabel endSliceText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner mosaicMSpinner;
    private javax.swing.JSpinner mosaicNSpinner;
    private javax.swing.JToolBar mosaicToolbar;
    private javax.swing.JButton okButton;
    private javax.swing.JButton saggitalMosaicViewButton;
    private javax.swing.JButton saveImageButton;
    private javax.swing.JButton settingsButton;
    private javax.swing.JDialog settingsDialog;
    private javax.swing.JSlider startSliceSlider;
    private javax.swing.JLabel startSliceText;
    private javax.swing.JSlider viewSlider;
    // End of variables declaration//GEN-END:variables
    
    private void initMosaic(int n,int m){
        GridLayout panelLayout = new GridLayout(n,m);
        displayPanel.setLayout(panelLayout);
    }
    private void initSettings(){
        SpinnerNumberModel model;
        startSlice=0;
        switch(plane){
            case "coronal":
                endSlice=niiVol.header.dim[2];
                break;
            case "saggital":
                endSlice=niiVol.header.dim[1];
                break;
            case "axial":
                endSlice=niiVol.header.dim[3];
                break;
        }
        startSliceSlider.setMaximum(endSlice-(n*m));
        startSliceSlider.setValue(startSlice);
        startSliceText.setText(Integer.toString(startSlice));
        flag=true;
        viewSlider.setValue(startSlice);
        viewSlider.setMaximum(endSlice-(n*m));
        flag=false;
        endSliceSlider.setMinimum(startSlice+(n*m));
        endSliceSlider.setMaximum(endSlice);
        endSliceSlider.setValue(endSlice);
        endSliceText.setText(Integer.toString(endSlice));
        
        model = new SpinnerNumberModel(n,2,10,1);
        mosaicNSpinner.setModel(model);
        model= new SpinnerNumberModel(m,2,10,1);
        mosaicMSpinner.setModel(model);
    }
    /****Draw Mosaics****/
    private void drawMosaics(){
        switch(plane){
            case"coronal":
                drawCoronalMosaic();
                break;
            case"saggital":
                drawSaggitalMosaic();
                break;
            case"axial":
                drawAxialMosaic();
                break;
        }
    }
    private void drawCoronalMosaic (){
        BufferedImage img;
        BufferedImage img2;
        Color c=new Color(0,0,0,0);
        int range=endSlice-startSlice;
        int val=startSlice;
        int gap=(int)(range/(double)(n*m));
        if(overlayVol==null){
            for(int i=0;i<n*m;i++){
                if(val<endSlice){
                     val=startSlice+i*gap;
                     img=niiVol.drawNiftiSlice(val,plane,0,colorScale);
                     createTilePanel(img,val);
                }
            }
        }else{
            for(int i=0;i<n*m;i++){
                if(val<endSlice){
                     val=startSlice+i*gap;
                     img=niiVol.drawNiftiSlice(val,plane,0,colorScale);
                     img2=overlayVol.drawNiftiSlice(val,plane,0,colorScaleOverlay);
                     Graphics g=img.getGraphics();
                     g.drawImage(img2,0,0,c,null);
                     createTilePanel(img,val);
                }
            }
        }
    }
    private void drawSaggitalMosaic(){
        BufferedImage img;
        BufferedImage img2;
        Color c=new Color(0,0,0,0);
        int range=endSlice-startSlice;
        int val=startSlice;
        int gap=(int)(range/(double)(n*m));
        if(overlayVol==null){
            for(int i=0;i<n*m;i++){
                if(val<endSlice){
                     val=startSlice+i*gap;
                     img=niiVol.drawNiftiSlice(val,plane,0,colorScale);
                     createTilePanel(img,val);
                }
            }
        }else{
            for(int i=0;i<n*m;i++){
                if(val<endSlice){
                     val=startSlice+i*gap;
                     img=niiVol.drawNiftiSlice(val,plane,0,colorScale);
                     img2=overlayVol.drawNiftiSlice(val,plane,0,colorScaleOverlay);
                     Graphics g=img.getGraphics();
                     g.drawImage(img2,0,0,c,null);
                     createTilePanel(img,val);
                }
            }
        }
    }
    private void drawAxialMosaic   (){
        BufferedImage img;
        BufferedImage img2;
        Color c=new Color(0,0,0,0);
        int range=endSlice-startSlice;
        int val=startSlice;
        int gap=(int)(range/(double)(n*m));
        if(overlayVol==null){
            for(int i=0;i<n*m;i++){
                if(val<endSlice){
                     val=startSlice+i*gap;
                     img=niiVol.drawNiftiSlice(val,plane,0,colorScale);
                     createTilePanel(img,val);
                }
            }
        }else{
            for(int i=0;i<n*m;i++){
                if(val<endSlice){
                     val=startSlice+i*gap;
                     img=niiVol.drawNiftiSlice(val,plane,0,colorScale);
                     img2=overlayVol.drawNiftiSlice(val,plane,0,colorScaleOverlay);
                     Graphics g=img.getGraphics();
                     g.drawImage(img2,0,0,c,null);
                     createTilePanel(img,val);
                }
            }
        }
    }
    /***Create Tile Panels***/
    private void createTilePanel(BufferedImage img,int sliceNum){
        int width=(int)(displayPanel.getWidth()/((double)n));
        int height=(int)(displayPanel.getHeight()/((double)m));
        
        displayPanel.setVisible(false);
        javax.swing.JPanel tilePanel = new javax.swing.JPanel();
        tilePanel.removeAll();
        javax.swing.JLabel leftLabel = new javax.swing.JLabel();
        javax.swing.JLabel topLabel = new javax.swing.JLabel();
        javax.swing.JLabel rightLabel = new javax.swing.JLabel();
        javax.swing.JLabel bottomLabel = new javax.swing.JLabel();
        javax.swing.JLabel graphLabel = new javax.swing.JLabel();
        javax.swing.JLabel sliceLabel = new javax.swing.JLabel();
        
        tilePanel.setBackground(new java.awt.Color(0, 0, 0));
        tilePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255,0,0)));
        tilePanel.setMaximumSize(new java.awt.Dimension(width,height));
        tilePanel.setMinimumSize(new java.awt.Dimension(width,height));
        tilePanel.setPreferredSize(new java.awt.Dimension(width,height));
        
        sliceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        String str=Integer.toString(sliceNum);
        sliceLabel.setText("<html> <font size='3' color=\"Yellow\">"+str+"</font>");
        
        leftLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        topLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rightLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bottomLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        switch(plane){
            case "coronal":
                if(view){
                    leftLabel.setText("<html> <font size='2' color=\"Lime\">R</font>");
                    rightLabel.setText("<html> <font size='2' color=\"Lime\">L</font>");
                }else{
                    leftLabel.setText("<html> <font size='2' color=\"Lime\">L</font>");
                    rightLabel.setText("<html> <font size='2' color=\"Lime\">R</font>");
                }
                topLabel.setText("<html> <font size='2' color=\"Lime\">S</font>");
                bottomLabel.setText("<html> <font size='2' color=\"Lime\">I</font>");
                break;
            case "saggital":
                leftLabel.setText("<html> <font size='2' color=\"Lime\">P</font>");
                rightLabel.setText("<html> <font size='2' color=\"Lime\">A</font>");
                topLabel.setText("<html> <font size='2' color=\"Lime\">S</font>");
                bottomLabel.setText("<html> <font size='2' color=\"Lime\">I</font>");
                break;
            case "axial":
                if(view){
                    leftLabel.setText("<html> <font size='2' color=\"Lime\">R</font>");
                    rightLabel.setText("<html> <font size='2' color=\"Lime\">L</font>");
                }else{
                    leftLabel.setText("<html> <font size='2' color=\"Lime\">L</font>");
                    rightLabel.setText("<html> <font size='2' color=\"Lime\">R</font>");
                }
                topLabel.setText("<html> <font size='2' color=\"Lime\">A</font>");
                bottomLabel.setText("<html> <font size='2' color=\"Lime\">P</font>");
                break;
        }
        
        graphLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        graphLabel.setSize(new java.awt.Dimension(width-36,height-36));
        graphLabel.setPreferredSize(new java.awt.Dimension(width-36,height-36));
        graphLabel.setMinimumSize(graphLabel.getPreferredSize());
        graphLabel.setMaximumSize(graphLabel.getPreferredSize());
        
        
        javax.swing.GroupLayout tilePanelLayout = new javax.swing.GroupLayout(tilePanel);
        tilePanel.setLayout(tilePanelLayout);
        tilePanelLayout.setHorizontalGroup(
            tilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tilePanelLayout.createSequentialGroup()
                .addComponent(leftLabel)
                .addGap(2, 2, 2)
                .addGroup(tilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(graphLabel, javax.swing.GroupLayout.DEFAULT_SIZE, width-36, Short.MAX_VALUE)
                    .addComponent(topLabel)
                    .addComponent(bottomLabel))
                .addGap(2, 2, 2)
                .addGroup(tilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(sliceLabel)
                    .addComponent(rightLabel))
        ));
        tilePanelLayout.setVerticalGroup(
            tilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tilePanelLayout.createSequentialGroup()
                .addGroup(tilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(topLabel)
                    .addComponent(sliceLabel)
                    .addGap(2, 2, 2))
                .addGroup(tilePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(rightLabel)
                    .addComponent(graphLabel, javax.swing.GroupLayout.DEFAULT_SIZE, height-36, Short.MAX_VALUE)
                    .addComponent(leftLabel))
                .addGap(2, 2, 2)
                .addComponent(bottomLabel))
        );
        
        UITools.imageToLabel(img,graphLabel);
        displayPanel.add(tilePanel);
        
        displayPanel.setVisible(true);
    }
    private void savePanel(){
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(BarracudaViewMosaicFrame.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fc.getSelectedFile();
                String directory = file.getAbsolutePath();
                Dimension size = displayPanel.getSize();
                BufferedImage image = new BufferedImage(
                    size.width, size.height 
                    , BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2 = image.createGraphics();
                displayPanel.paint(g2);
                try{
                    SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy_MM_dd_HHmm");//dd/MM/yyyy
                    Date now = new Date();
                    String strDate = sdfDate.format(now);
                    ImageIO.write(image, "png", new File(directory+"\\"+strDate+"_"+plane+"_mosaic.png"));
                }catch(Exception e){
                       
                }
            } else {
                returnVal=0;
            }
    }
}
